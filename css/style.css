:root {
    /*Custom CSS Properties (CSS Variables)*/
    --primary-color: #e50914;
    --dark-color: #141414;
}

* /* this affects everything*/ {
    box-sizing: border-box; /* so padding doesn't affect width*/
    margin: 0;
    padding: 0;
}

body {
    font-family: Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    background: #000;
    color: #999;
}

ul {
    list-style: none;
}

h1, h2, h3, h4 {
    color: #fff;
}

a { 
    color: #fff;
    text-decoration: none;
}

p {
    margin: 0.5rem 0;
}

img {
    width: 100%;
}

.showcase {
    width: 100%;
    height: 93vh; /* allows for content hinting */
    position: relative;
    background: url('../img/netflix-background.jpg') no-repeat center center/cover;
}

.showcase:after /*for overlay*/{
    content: ''; /*I don't want to insert any content so just put empty quotes here*/
    /*the idea is that we want to position this inside our showcase, which is positioned relative*/
    position: absolute;
    top: 0; /*span from the top*/
    left: 0; /*span from the top left*/
    width: 100%; /*we want it to span the whole thing */
    height: 100%; /*we want it to span the whole thing */
    z-index: 1;
    background: rgba(0,0,0,0.6);
    box-shadow: inset 50px 80px 140px #000000, inset -50px -80px 140px #000000; /* shadows around screen, remove this to see the difference*/
}

.showcase-top {
    position: relative;
    height: 90px;
    z-index: 2; /*now higher than overlay*/
}

.showcase-top img {
    width: 170px;/* reducing netflix logo size */
    position: absolute; /*positioning the image absolute inside it's relative parent element (showcase-top) */
    top: 50%; /* down 50% */
    left: 50%; 
    transform: translate(-50%, -50%); /* fixed positioning of image to make it more central, makes up for the additional height/width of the image itself */
}

.showcase-top a {
    position: absolute;
    top: 50%;
    right: 0;
    transform: translate(-50%, -50%);
}

.showcase-content {
    position: relative;
    z-index: 2; /*higher than overlay*/
    margin: auto;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    margin-top: 9rem;
}

.showcase-content h1 {
    font-weight: 700;
    font-size: 5.2rem;
    line-height: 1.1;
    margin: 0 0 2rem; /* margin bottom 2 rem*/
}

.showcase-content p {
    text-transform: uppercase;
    color: white;
    font-weight: 400;
    font-size: 1.9rem;
    line-height: 1.25;
    margin: 0 0 2rem;
}

/* Tabs */

.tabs {
    background: var(--dark-color); /* colour for the whole section*/
    padding-top: 1rem; /* give icons breathing room*/
    border-bottom: 3px solid #3d3d3d; /* border for the whole section*/
}

.tabs .container /*I want the 3 tab items to be the grid items. Therefore, we select their parent "container" class as the grid*/ {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /*we want 3 equal rows*/ /* could have alternativley used 1fr 1fr 1fr */
    grid-gap: 1rem; /*gap between grid items*/
    align-items: center;
    text-align: center;
    justify-content: center;
}

.tabs p {
    font-size: 1.2rem;
    padding-top: 0.5rem;
}

.tabs .container > div /*direct divs inside container get padding on top/bottom */{
    padding: 1.5rem 0;
}

.tabs .container > div:hover {
    color: white;
    cursor: pointer;
}

.tab-border {
    border-bottom: var(--primary-color) 4px solid;
}

/*Container */

.container {
    max-width: 70%; /* container itself takes 70% of the screen width */
    margin:auto; /* we want everything in the middle*/
    overflow: hidden; /*want everything to stay in container*/
    padding:0 2rem ;
}


/*buttons*/

.btn {
    display: inline-block;
    background: var(--primary-color); /* variable defined at top*/
    color: #fff;
    padding: 0.4rem 1.3rem;
    font-size: 1rem;
    text-align: center;
    border: none;
    cursor: pointer; /* pointer will look better for buttons */
    margin-right: 0.5rem; /* just incase we put buttons inline next to each other */
    outline: none; /* no button outline */
    box-shadow: 0 1px 0 rgba(0,0,0,0.45); 
    border-radius: 2px; /* bit of roundess to button */
}

.btn:hover {
    opacity: 0.9; /*will give the effect of changing colour when hovered */
}

.btn-rounded {
    border-radius: 5px; /*more rounded*/
}

.btn-xl {
    font-size: 2rem;
    text-transform: uppercase;
    padding: 1.5rem 2.1rem; /* top/bottom left/right */
}

.btn-lg /*smaller version */ {
    font-size: 1rem;
    text-transform: uppercase;
    padding: 0.8rem 1.3rem; 
}